#+TITLE:  README
#+AUTHOR: Yang,Ying-chao
#+DATE:   2024-07-02
#+OPTIONS:  ^:nil H:5 num:t toc:2 \n:nil ::t |:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+STARTUP:  align nodlcheck oddeven lognotestate
#+SEQ_TODO: TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+LANGUAGE: en
#+TAGS:     noexport(n)
#+EXCLUDE_TAGS: noexport
#+FILETAGS: :tag1:tag2:

I wrote some functions with elisp to help me analyze core dumps & call stacks. I think they are very
helpful, so I've decided to rewrite them in Rust, making them usable outside of Emacs.

#+begin_src sh -r :results verbatim :exports both
./target/debug/cs --help
#+end_src

#+RESULTS:
#+begin_example
Tool to show call stack of process(es)

Usage: cs [OPTIONS] [FILES]...

Arguments:
  [FILES]...  files to read stack from, use "-" for stdin; multiple files will be merged together

Options:
  -p, --pid <PIDS>               Show stack of process PID
  -c, --core <CORE>              Show stack found in COREFILE
  -e, --executable <EXECUTABLE>  (optional) EXECUTABLE that produced COREFILE
  -u, --users <USERS>            Show processes of users (separated by \",\") when listing/choosing processes
  -l, --list [<LIST>]            List processes
  -i, --initial <INITIAL>        Initial value to filter process
  -W, --Wide                     Wide mode: when showing processes, show all chars in a line
  -M, --multi                    Multi mode: when choosing processes, to select multiple processes
  -U, --unique                   Unique mode: when showing call stack, show only unique ones
  -G, --gdb                      gdb mode: use gdb to get call stack (default to eu-stack)
  -R, --raw                      Raw mode: do not try to simplify callstacks (works only in GDB mode)
  -h, --help                     Print help
  -V, --version                  Print version
#+end_example
